how can go back in time with commits ? 
git checkout commitID (detached head with no branch ) 
git branch -b f1 (add a branch to the detached head) 



git reset HEAD~1 (remove -1 commit and untstage changes ) 
git reset --soft HEAD~1 (remove -1 commit but with changes staged ) 
git reset --hard HEAD~1 (remove -1 commit completly )



if we have the same commits base => created new branch f1 => added commits => want to merge with master => fast forward 


if we have different commits base => created new branch f1 => added commits => added commits to the master branch => want to merge  master and f1  => recursive merge  => this will create an additional merge commit (that can be undone with git reset --hard HEAD~1 to get cancel the merge ) 


git rebase : we have 2 branches with different history commits (f1 and master ) 
we are currently in the f1 branch => git rebase master => will add the lastest changes to the f1 from the master branch AND then follow up with rest of the commits in the f1 branch 


git cheery-pick commitID : just take a specific commit ( a typo fix ) and add it to the head branch 
will create a new commit hash with same content 

#######################################################################################

git push (without branch or repo name) 
Usually we create a local tracking branch (can be edited ) with the same name as a remote tracking branch 'origin/f1' only used to track the changes in the remote repo (cant be edited) . So we can edit the local copy and use "GIT PUSH' 
=> git branch --track f-branch origin/f-branch 

BRANCHES  in git : 
local branch :  branch related to a remote tracking branch ||| or just a simple branch locally 
remote branch : in github  ||| remote tracking branch to not be edited  

git push -u origin master : will automatically create both master remote branch in github and also a local tracking branch and of course a remote tracking branch for master 
INSTEAD of pushing changed deleting the current branch that we pushed from .. create a new branch based on the remote tracking branch and setting it as the local tracking branch 

#########################################################################################

git push --force origin master (superpass the non fast forward shit ) 
